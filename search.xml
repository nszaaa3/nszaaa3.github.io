<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker-2、容器安装之Oracle 11g r2</title>
      <link href="/2022/03/03/Docker-2-Container-Oracle11g/"/>
      <url>/2022/03/03/Docker-2-Container-Oracle11g/</url>
      
        <content type="html"><![CDATA[<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>我还在纠结要不要发布这篇文章, 因为谁能想到2022年了居然还要写Oracle<br>11g的docker安装方法。我最早是在2017年6月份在笔记里记录的11g的docker，一晃5年过去了，这篇文章还用得上。我在几个群里边问了问，很多企业还在用11g和12c，就像他们还在用MySQL5.6，还在用JDK7，还在坚守CentOS，还在用SVN。</p><p>再延伸一下，如果文章会打酱油的话，现在<a href="/hexo/img/bazinga.gif">CSDN</a>上到处都是长得一模一样的孩子开杂货铺卖酱油了，中文互联网内容在凋零，新互联网人在抱残守缺，不愿输出新内容，进而导致全网性的内容过时、技术过时。</p><h2 id="Oracle-11g"><a href="#Oracle-11g" class="headerlink" title="Oracle 11g"></a>Oracle 11g</h2><h3 id="容器安装"><a href="#容器安装" class="headerlink" title="容器安装"></a>容器安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run  -p 1521:1521 \</span><br><span class="line">-v /opt/docker/oracle/data/oracle:/data/oracle \</span><br><span class="line">--name oracle11 \</span><br><span class="line">-d registry.cn-hangzhou.aliyuncs.com/helowin/oracle_11g</span><br></pre></td></tr></table></figure><ul><li>-p [xxxx]:1521 将容器中的1521端口映射到宿主机的xxxx端口<ul><li>p - port 端口</li></ul></li><li>-v [&#x2F;xxx&#x2F;xxx]: &#x2F;data&#x2F;oracle 将容器中的&#x2F;data&#x2F;oracle 目录映射到宿主机的&#x2F;xxx&#x2F;xxx目录，在这里我映射到宿主机的&#x2F;opt&#x2F;docker&#x2F;oracle&#x2F;data&#x2F;oracle<ul><li>v - volume 卷</li></ul></li><li>-d 后台运行容器，并返回容器ID<ul><li>d - detach 分离</li></ul></li></ul><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>进入容器内部</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it --user root oracle11 /bin/bash</span><br></pre></td></tr></table></figure><p>安装vim编辑器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vim</span><br></pre></td></tr></table></figure><p>编辑 &#x2F;etc&#x2F;profile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure><p>在尾部添加如下字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ORACLE_HOME=/home/oracle/app/oracle/product/11.2.0/dbhome_2</span><br><span class="line">export ORACLE_SID=helowin</span><br><span class="line">export PATH=$ORACLE_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><h3 id="创建新用户并授权远程登录"><a href="#创建新用户并授权远程登录" class="headerlink" title="创建新用户并授权远程登录"></a>创建新用户并授权远程登录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">su -oracle</span><br><span class="line">sqlplus /nolog</span><br><span class="line">conn /as sysdba</span><br><span class="line"><span class="meta">#</span><span class="language-bash">修改system用户账号密码；</span></span><br><span class="line">alter user system identified by system;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">修改sys用户账号密码；</span></span><br><span class="line">alter user sysidentified by system;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">创建内部管理员账号；</span></span><br><span class="line">create user YONGHUMING identified by MIMA; </span><br><span class="line"><span class="meta">#</span><span class="language-bash">授权</span></span><br><span class="line">grant connect,resource,dba to YONGHUMING;  </span><br><span class="line"><span class="meta"> #</span><span class="language-bash">修改密码规则策略为密码永不过期；</span></span><br><span class="line">ALTER PROFILE DEFAULT LIMIT PASSWORD_LIFE_TIME UNLIMITED;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">修改数据库最大连接数据；</span></span><br><span class="line">alter system set processes=1000 scope=spfile; </span><br><span class="line">exit</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="重启数据库使之生效"><a href="#重启数据库使之生效" class="headerlink" title="重启数据库使之生效"></a>重启数据库使之生效</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlplus /nolog</span><br><span class="line">conn /as sysdba</span><br><span class="line">shutdown immediate;</span><br><span class="line">startup;</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="修改字符集为-utf-8"><a href="#修改字符集为-utf-8" class="headerlink" title="修改字符集为 utf-8"></a>修改字符集为 utf-8</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">Server端字符集修改</span></span><br><span class="line">sqlplus &quot;/as sysdba&quot;</span><br><span class="line">conn /as sysdba;</span><br><span class="line">shutdown immediate;</span><br><span class="line">startup mount;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">将数据库启动到RESTRICTED模式下做字符集更改：</span></span><br><span class="line">ALTER SYSTEM ENABLE RESTRICTED SESSION;</span><br><span class="line">ALTER SYSTEM SET JOB_QUEUE_PROCESSES=0;</span><br><span class="line">ALTER SYSTEM SET AQ_TM_PROCESSES=0;</span><br><span class="line">alter database open;</span><br><span class="line">alter database character set INTERNAL_USE UTF8;</span><br><span class="line">shutdown immediate;</span><br><span class="line">startup;</span><br><span class="line">exit;</span><br></pre></td></tr></table></figure><p>至此，Oracle 11g 的容器安装完成，但是真不希望有人再继续安装11g，转而去安装更高版本，我也会在后续日志中补全12g以及后续LTS版本。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Database </tag>
            
            <tag> Oracle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-1、容器安装之MySQL(5.7/8.0)</title>
      <link href="/2022/03/01/Docker-1-Container-MySQL/"/>
      <url>/2022/03/01/Docker-1-Container-MySQL/</url>
      
        <content type="html"><![CDATA[<p>OK，我已经把我抄的教程全部删掉了，再从自己在用的容器中摘几个新鲜的出来。 用的源几乎都是国内的docker镜像，所以安装起来飞快。</p><h2 id="MySQL5-7"><a href="#MySQL5-7" class="headerlink" title="MySQL5.7"></a>MySQL5.7</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 \</span><br><span class="line">--name mysql57 \</span><br><span class="line">-v /opt/docker/mysql57/conf.d:/etc/mysql/conf.d \</span><br><span class="line">-v /opt/docker/mysql57/mysql.conf.d:/etc/mysql/mysql.conf.d \</span><br><span class="line">-v /opt/docker/mysql57/logs:/logs \</span><br><span class="line">-v /opt/docker/mysql57/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d hub.c.163.com/library/mysql:5.7</span><br></pre></td></tr></table></figure><ul><li>-p [xxxx]:3306 将容器中的3306端口映射到宿主机的xxxx端口<ul><li>p - port 端口</li></ul></li><li>-v [&#x2F;xxx&#x2F;xxx]: &#x2F;etc&#x2F;mysql&#x2F;conf.d 将容器中的&#x2F;etc&#x2F;mysql&#x2F;conf.d目录映射到宿主机的&#x2F;xxx&#x2F;xxx目录，在这里我映射到宿主机的&#x2F;opt&#x2F;docker&#x2F;mysql57&#x2F;conf.d<ul><li>v - volume 卷</li></ul></li><li>-e xxx&#x3D;xxx 设定环境变量<ul><li>e - environment 环境</li></ul></li><li>-d 后台运行容器，并返回容器ID<ul><li>d - detach 分离</li></ul></li></ul><p>在上面有4个 -v 参数，分别将容器中的两个配置目录、一个日志目录、 一个数据目录映射到宿主机指定的目录里，这样即使容器因为环境崩溃时，我们也可以在这里修改、查看、操作容器的配置、数据</p><p>通过此法创建的MySQL创建完成后，还有两个后续操作：</p><ul><li>修改全局默认编码方式为utf8</li><li>取消大小写敏感</li></ul><p>因为已经有上面的映射操作，我们就可以在本地直接修改</p><ul><li><p>用vim编辑mysql.cnf文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/docker/mysql57/conf.d/mysql.cnf</span><br></pre></td></tr></table></figure><p>添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure></li><li><p>用vim编辑mysqld.cnf文件 添加如下内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">lower_case_table_names=1</span><br></pre></td></tr></table></figure></li></ul><h2 id="MySQL8-0"><a href="#MySQL8-0" class="headerlink" title="MySQL8.0"></a>MySQL8.0</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 \</span><br><span class="line">--name mysql80 \</span><br><span class="line">-v /opt/docker/mysql80/conf:/etc/mysql/conf.d \</span><br><span class="line">-v /opt/docker/mysql80/logs:/logs \</span><br><span class="line">-v /opt/docker/mysql80/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d hub.c.163.com/library/mysql:8.0 \</span><br><span class="line">--lower_case_table_names=1 \</span><br><span class="line">--character-set-server=utf8</span><br></pre></td></tr></table></figure><p>Well，创建MySQL8.0容器的时候可以直接指定大小写敏感和默认编码方式，更多的是因为MySQL8.0我玩得还不是很溜，按照MySQL5.7那样修改时，不会生效，所以找到了这个方法。我在创建MySQL5.7容器的时候咋没看到这样的好方法？</p><h2 id="后续操作"><a href="#后续操作" class="headerlink" title="后续操作"></a>后续操作</h2><p>因为Linux上的MySQL5.7和MySQL8.0的root账户默认不允许远程连接，也不建议远程连接，所以需要进入到MySQL容器内部去创建一个新用户并授权远程操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo docker exec -it mysql57 bash</span><br><span class="line"><span class="meta">#</span><span class="language-bash">或者</span></span><br><span class="line">sudo docker exec -it mysql80 bash</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="language-bash">登录MySQL</span></span><br><span class="line">mysql -u root -p123456</span><br><span class="line"><span class="meta">#</span><span class="language-bash">修改密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED BY &#x27;new_password&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">添加远程登录用户</span></span><br><span class="line">CREATE USER &#x27;new_user&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;new_password&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">给予权限</span></span><br><span class="line"><span class="meta">#</span><span class="language-bash">MySQL 5.7版本：</span></span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;new_user&#x27;@&#x27;%&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="language-bash">MySQL 8.0版本：</span></span><br><span class="line">GRANT ALL PRIVILEGES on *.* to &#x27;new_user&#x27;@&#x27;%&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><p>修改保存完成之后，重启容器即可生效。</p><p>现在可以用远程工具来连接MySQL了。</p><p>如果宿主机没有安装MySQL，所以需要安装mysql-client或者mycli。</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> MySQL </tag>
            
            <tag> Database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-0、基础概念</title>
      <link href="/2022/02/20/Docker-0-What-Why-How/"/>
      <url>/2022/02/20/Docker-0-What-Why-How/</url>
      
        <content type="html"><![CDATA[<h2 id="Before"><a href="#Before" class="headerlink" title="Before"></a>Before</h2><p>最近入职了新公司，公司大发慈悲给配了一台电脑；</p><p>——“那么古尔丹，代价是什么？”</p><p>——“这一切……”</p><p>电脑上的所有操作全部被监控了，一堆软件不让装，相应的也就不能用Google搜索了，我打开了熟悉的度娘，那一刻，人类终于回想起了被<a href="/hexo/img/bazinga.gif">CSDN</a>支配的恐怖。</p><p>抛开充满抄袭狗不说，被抄袭的文章还是十年前东拼西凑的东西，单说Docker相关的文章，不知道这些CSDN作者是商量好了还是集体缺心眼，所有文章的第一步都是：</p><p><code>docker pull centos</code></p><p>或者是：</p><p><code>docker run centos</code></p><p>这样操作是通过Docker创建一个<del>CentOS</del>虚拟机，再在虚拟机里装需要的软件。</p><p>我完全没有嘲笑这样操作的意思，我意思是看不起这种操作，连看一眼的价值都没有，这些人是想告诉你：我会创建虚拟机，并且会通过虚拟机安装软件。这样做完全违背了Docker的便捷性，<br>如果说这样操作有一点点符合Docker精神，那就是你可以很方便地通过一个命令删掉所有你用的软件：</p><p><code>docker rm centos</code></p><h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>为什么这样说，我们先来看看Docker的标识，如下图：</p><p><img src="/img/docker.gif" alt="docker"></p><p>我们再来学习几个英语单词：</p><table><thead><tr><th align="center">英文</th><th align="center">中文</th></tr></thead><tbody><tr><td align="center">docker</td><td align="center">码头工人</td></tr><tr><td align="center">container</td><td align="center">集装箱&#x2F;容器</td></tr></tbody></table><p>官方构图很形象，每一个容器就是一个集装箱，集装箱里是你需要的内容；</p><p>那么码头工人的任务是：创建、搬运、打开、操作、关闭、移除集装箱（容器）；</p><p>由此可见，每一个容器应当只盛装特定的某一类或某一种的内容，如此说来，我为上面说的看不起 <code>docker pull centos</code> 道歉，因为<del>CentOS</del>的确盛装了很多东西，这些东西统称为S-H-I-T。</p><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>因为Docker发展到今天，市场上已经有无数可以直接拉取直接使用的Docker容器，对比以下两段代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">Installing MySQL <span class="keyword">in</span> a CentOS container</span></span><br><span class="line">sudo docker pull centos</span><br><span class="line">sudo docker run -it --name centos7 -p 3306:3306 --privileged=true centos:latest /usr/sbin/init</span><br><span class="line">sudo docker exec -it centos7 bash</span><br><span class="line">yum update</span><br><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">Installing a MySQL container</span></span><br><span class="line">docker run -p 3306:3306 --name mysql57 mysql</span><br></pre></td></tr></table></figure><p>这两段代码完成了同样的工作——创建一个docker容器，并安装好MySQL数据库，安装下载MySQL的时间还不计在内。</p><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>下面是Docker的安装教程：</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># </span><span class="language-bash">step1: Download Installing script</span></span><br><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line"><span class="meta"># </span><span class="language-bash">step2: Install</span></span><br><span class="line">sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><h3 id="Docker-desktop"><a href="#Docker-desktop" class="headerlink" title="Docker-desktop"></a>Docker-desktop</h3><p>适配于Windows系统和Mac系统的桌面版Docker的官方下载地址：</p><p><a href="https://www.docker.com/products/docker-desktop">Docker-desktop Download</a></p><p>手动安装完成之后会自动配置系统环境变量。</p><p>现在可以拉取一个Hello-World镜像来试验Docker是否安装完成:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run hello-world</span><br></pre></td></tr></table></figure><p><del>OK，本来写了一堆Docker基础操作内容，自己看了一下，扔马桶里了，直接从笔记里摘出来我的容器。</del>  </p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
